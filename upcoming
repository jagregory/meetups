#!/usr/bin/env ruby

require './meetups_api'
require 'time'
require 'optparse'

ICONS = {
  ours: {
    emoji: '🏠',
    image: 'https://mail.google.com/mail/e/4B0'
  },
  attending: {
    emoji: '🌟',
    image: 'https://mail.google.com/mail/e/B68'
  }
}

OPTIONS = {
  blacklist: 'blacklist.txt',
  category: 34,
  city: 'sydney',
  highlight: 'users.yml',
  fast: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: upcoming [options]"

  opts.on('--all', "Don't use a blacklist") { |v| OPTIONS[:all] = v }
  opts.on('--raw', "Raw output, no markdown") { |v| OPTIONS[:raw] = v }
  opts.on('-c', '--city CITY', 'Meetup city (default: Sydney)') { |v| OPTIONS[:city] = v }
  opts.on('-b', '--blacklist FILE', 'Meetup blacklist file (default: blacklist.txt)') { |v| OPTIONS[:blacklist] = v }
  opts.on('--highlight FILE', 'Attendees to highlight (default: users.yml)') { |v| OPTIONS[:highlight] = v }
  opts.on('-f', '--fast', "Don't highlight notable attendees") { |v| OPTIONS[:fast] = v }
  opts.on('--category N', Integer, 'Meetup.com category ID (default: 34)') { |v| OPTIONS[:category] = v }
  opts.on('-v', '--verbose', 'Log debug info') { |v| OPTIONS[:verbose] = v }
  opts.on('--emoji', 'Use emoji for icons') { |v| OPTIONS[:emoji] = v }
end.parse!

def icon(name)
  return ICONS[name][:emoji] if OPTIONS[:emoji]
  "![](#{ICONS[name][:image]})"
end

# try to strip the city name from the start or end of a meetup/group name
def clean_name(name)
  name.gsub(/(?:the\s+)?+#{OPTIONS[:city]}\s?+/i, '').strip
end

# print a single meetup (as a bullet point in markdown)
def print_meetup(meetup)
  time = meetup.time.strftime('%l.%M%P').strip
  print "  * "
  print "#{icon :attending}  " if meetup.notable_attendees > 0
  print "#{icon :ours}  " if meetup.venue && meetup.venue.name =~ /thoughtworks/i
  print "#{time} [#{meetup.name} (#{clean_name meetup.group})](#{meetup.url})"
  puts
  puts "    (TWers: #{meetup.notable_attendees})" if meetup.notable_attendees > 0
end

unless OPTIONS[:all] || File.exist?(OPTIONS[:blacklist])
  puts "Error: Blacklist file not found (#{OPTIONS[:blacklist]})"
  exit(1) 
end

meetups_api = MeetupsApi.new(ENV['API_KEY'], OPTIONS)
meetups = meetups_api.meetups()

if OPTIONS[:raw]
  meetups.each do |m|
    puts "#{m.time}\t#{m.group}\t#{m.notable_attendees}\t#{m.url}"
  end
else
  puts "#{icon :ours}  - Hosted at ThoughtWorks, #{icon :attending}  - ThoughtWorkers in attendance"
  puts
  # group the meetups by day and print them out
  meetups_by_day = meetups.group_by { |m| m.time.strftime('%Y-%m-%d') }
  meetups_by_day.each do |date,meetups|
    puts "## #{Time.parse(date).strftime('%A')}"
    puts

    meetups.each(&method(:print_meetup))

    puts
  end
end
